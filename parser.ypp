%{
#include <stdio.h>
#include <iostream>
#include "hw3_output.hpp"
#include "TableStack.hpp"
#include "Node.hpp"
using namespace std;
using namespace output;
extern int yylineno;
extern char* yytext;
int yylex();
void yyerror(const char*);

TableStack stack = TableStack();
%}

%token INT BYTE B BOOL TRUE FALSE RETURN IF WHILE BREAK CONTINUE SC ID NUM STRING 

%right ASSIGN
%left OR
%left AND
%left EQ
%left REL
%left PLUS MINUS
%left MULT DIV
%right NOT
%left RPAREN LPAREN LBRACE RBRACE
%right ELSE

%%

Program: Statments {$$ = Program(&($1));}
        
Statments: Statment {$$ = Statements(&($1));}
        | Statments Statment {$$ = Statements(&($2), &($1));}
        
Statment: LBRACE {stack.addTableToStack()} Statments RBRACE {$$ = Statement(&($1));}
        | Type ID SC {$$ = Statement(&($1), $2);}
        | Type ID ASSIGN Exp SC {$$ = Statement(&($1), &($2), &($4));}
        | ID ASSIGN Exp SC {$$ = Statement(&($1), &($3));}
        | Call SC {$$ = Statement(&($1));}
        | RETURN SC {$$ = Statement("return");}
        | IF LPAREN Exp RPAREN {stack.addTableToStack();} Statment {$$ = Statement(&($3), &($5), true);}
        | IF LPAREN Exp RPAREN {stack.addTableToStack();} Statment ELSE {stack.addTableToStack();} Statment {$$ = Statement(&($3), &($5), &($7));}
        | WHILE LPAREN Exp RPAREN {stack.addTableToStack();} Statment {$$ = Statement(&($3), &($5), false);}
        | BREAK SC {$$ = Statement("BREAK");}
        | CONTINUE SC {$$ = Statement("CONTINUE");}
        
Call: ID LPAREN Exp RPAREN {$$ = Call(&($3));};

Type: INT {$$ = Type("INT");}
    | BYTE {$$ = Type("BYTE");}
    | BOOL  {$$ = Type("BOOL");}
    
Exp: LPAREN Exp RPAREN {$$ = Expression(&($2), true);}
    | Exp PLUS Exp {$$ = Expression(&($1), &($3), "PLUS");}
    | Exp MINUS Exp {$$ = Expression(&($1), &($3), "MINUS");}
    | Exp MULT Exp {$$ = Expression(&($1), &($3), "MULT");}
    | Exp DIV Exp {$$ = Expression(&($1), &($3), "DIV");}
    | ID {$$ = Expression(&($1));}
    | Call {$$ = Expression(&($1));}
    | NUM {$$ = Expression(atoi(yytext));} //how can i get the val?? check tutorial
    | NUM B {$$ = Expression(atoi(yytext.pop_back()), true);}
    | STRING {$$ = Expression("STRING");}
    | TRUE {$$ = Expression("TRUE");}
    | FALSE {$$ = Expression("FALSE");}
    | NOT Exp {$$ = Expression(&($2), false);}
    | Exp AND Exp {$$ = Expression(&($1), &($3), "AND");}
    | Exp OR Exp {$$ = Expression(&($1), &($3), "OR");}
    | Exp REL Exp {$$ = Expression(&($1), &($3), "REL");}
    | Exp EQ Exp {$$ = Expression(&($1), &($3), "EQ");}
    | LPAREN Type RPAREN Exp {$$ = Expression(&($2), &($4));}
    

%%

int main(){
    return yyparse();
}

void yyerror(const char* msg){
    errorSyn(yylineno);
    exit(0);
}


