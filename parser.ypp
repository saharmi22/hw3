%{
#include <stdio.h>
#include <iostream>
#include "hw3_output.hpp"
#include "TableStack.hpp"
#include "Node.hpp"
using namespace std;
using namespace output;
extern int yylineno;
extern char* yytext;
int yylex();
void yyerror(const char*);

TableStack stack = TableStack();
%}

%token INT BYTE B BOOL TRUE FALSE RETURN IF WHILE BREAK CONTINUE SC ID NUM STRING 

%right ASSIGN
%left OR
%left AND
%left EQ
%left REL
%left PLUS MINUS
%left MULT DIV
%right NOT
%left RPAREN LPAREN LBRACE RBRACE
%right ELSE

%%

Program: Statments                                                          {$$ = new Program(&($1));}
        
Statments: Statment                                                         {$$ = new Statements(&($1));}
        | Statments Statment                                                {$$ = new Statements(&($2), &($1));}
        
Statment: LBRACE {stack.addTableToStack()} Statments RBRACE                 {$$ = new Statement(&($1));}
        | Type ID SC {$$ = Statement(&($1), $2);}
        | Type ID ASSIGN Exp SC                                             {$$ = new Statement(&($1), &($2), &($4));}
        | ID ASSIGN Exp SC                                                  {$$ = new Statement(&($1), &($3));}
        | Call SC                                                           {$$ = new Statement(&($1));}
        | RETURN SC                                                         {$$ = new Statement("return");}
        | IF LPAREN Exp RPAREN AddTable Statment                            {$$ = new Statement(&($3), &($5), true);}
        | IF LPAREN Exp RPAREN AddTable Statment ELSE AddTable Statment     {$$ = new Statement(&($3), &($5), &($7));}
        | WHILE LPAREN Exp RPAREN AddTable Statment                         {$$ = new Statement(&($3), &($5), false);}
        | BREAK SC                                                          {$$ = new Statement("BREAK");}
        | CONTINUE SC                                                       {$$ = new Statement("CONTINUE");}

AddTable:                                                                   {stack.addTableToStack();} 

Call: ID LPAREN Exp RPAREN                                                  {$$ = new Call(&($3));};

Type: INT                                                                   {$$ = new Type("INT");}
    | BYTE                                                                  {$$ = new Type("BYTE");}
    | BOOL                                                                  {$$ = new Type("BOOL");}
    
Exp: LPAREN Exp RPAREN                                                      {$$ = new Expression($2, true);}
    | Exp PLUS Exp                                                          {$$ = new Expression($1, $3, "PLUS");}
    | Exp MINUS Exp                                                         {$$ = new Expression($1, $3, "MINUS");}
    | Exp MULT Exp                                                          {$$ = new Expression($1, $3, "MULT");}
    | Exp DIV Exp                                                           {$$ = new Expression($1, $3, "DIV");}
    | ID                                                                    {$$ = new Expression($1);}
    | Call                                                                  {$$ = new Expression($1);}
    | NUM                                                                   {$$ = new Expression(atoi(yytext));} 
    | NUM B                                                                 {$$ = new Expression(atoi(yytext.pop_back()), true);}
    | STRING                                                                {$$ = new Expression("STRING");}
    | TRUE                                                                  {$$ = new Expression("TRUE");}
    | FALSE                                                                 {$$ = new Expression("FALSE");}
    | NOT Exp                                                               {$$ = new Expression($2, false);}
    | Exp AND Exp                                                           {$$ = new Expression($1, $3, "AND");}
    | Exp OR Exp                                                            {$$ = new Expression($1, $3, "OR");}
    | Exp REL Exp                                                           {$$ = new Expression($1, $3, "REL");}
    | Exp EQ Exp                                                            {$$ = new Expression($1, $3, "EQ");}
    | LPAREN Type RPAREN Exp                                                {$$ = new Expression($2, $4);}
    

%%

int main(){
    return yyparse();
}

void yyerror(const char* msg){
    errorSyn(yylineno);
    exit(0);
}


